#eureka注册中心配置
#eureka:
#  instance:
#    prefer-ip-address: true #将IP注册到Eureka Server上 http://127.0.0.1:8088/
#  client:
#    api-url:
#      defaultZone: http://127.0.0.1:8060/eureka/
#    register-with-eureka: true
#    fetch-registry: true

#spring config 配置
#spring:
#  application:
#      name: api-gateway
#  main:
#    allow-bean-definition-overriding: true #后发现的bean会覆盖之前相同名称的bean
#  cloud:
#    config:
#      fail-fast: true #是否启动快速失败功能，功能开启则优先判断config server是否正常
#      name: api-druid-hdys  #配置中心Git仓库config文件夹里的文件名字
#      label: master         #默认分支master
#      profile: dev          #不加此属性直接获取api-druid-hdys.yml，加了后符合config的名字规则api-druid-hdys-dev.yml
#      discovery:
#        enabled: true
#        api-id: config-server  #spring cloud 配置中心服务名

#nacos注册中心配置中心
spring:
  application:
    name:  api-gatway
  cloud:
#    nacos:
#      # 配置中心
#      config:
#        server-addr: ${nacos.server-addr}
#        file-extension: yml
#        group: DEFAULT_GROUP
#        namespace: dev
#        extension-configs:
#          #通用日志配置
#          - data-id: hdys-common-log.yml
#            group: COMMON_GROUP
#            refresh: true
#          #熔断处理
#          #          - data-id: idoc-common-sentinel.yml
#          #            group: COMMON_GROUP
#          #            refresh: true
#          #服务发现
#          - data-id: hdys-common-discovery.yml
#            group: COMMON_GROUP
#            refresh: true
    nacos:
      discovery:
        server-addr: 127.0.0.1:8848
        namespace: dev
      config:
        server-addr: 127.0.0.1:8848
        namespace: dev
        group: DEFAULT_GROUP
        file-extension: yaml #nacos config扩展名 目前仅支持ymal和properties
        prefix: api-druid-hdys-gatway
        #extension-configs:
  profiles:
    active: dev   #和Nacos中的dataId 格式对应 ${prefix}-${spring.profile.active}.${file-extension}
  autoconfigure:
    exclude: org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration #排除eureka注册中心
#网关配置，已更改到nacos配置中心

    gateway:
       discovery:
         locator:
           lowerCaseServiceId: true  # eureka服务名为大写  配置之后访问时无需大写
           enabled: false  # 是否与服务发现组件进行结合，通过serviceId转发到具体的服务实例。默认为false，为true代表开启基于服务发现的路由规则，为每一个服务创建了一个router，这个router将以服务名开头的请求路径转发到对应的服务。
                           # 如果此参数为true,并且下面用了path匹配，则为每个服务创建了2个router，一个是Path匹配 一个是服务名匹配
       dynamic-routing:  #动态路由
         data-id: routes-${spring.application.name}
         group-id: ROUTES-GROUP
         server-addr: 127.0.0.1:8848
         namespace: dev
#       routes:
#       - id: limit_auth
#         uri: lb://api-auth
#         order: 1
#         predicates:
#         - Path=/api-auth/**
#         filters:
#         - name: RequestRateLimiter # filter名称必须是RequestRateLimiter
#           args:
#            key-resolver: '#{@hostAddrKeyResolver}' #使用SpEL按名称引用bean
#            redis-rate-limiter.replenishRate: 5      # 令牌桶每秒填充平均速率
#            redis-rate-limiter.burstCapacity: 10     # 令牌桶的上限 允许在 1s 内完成的最大请求数
#        - id: api-auth #路由id 唯一
#          uri: lb://api-auth # lb代表从注册中心获取服务 转发到此服务上
#          order: 2
#          predicates:  # Path Route Predicate Factory 模式
#          - Path=/api-auth/** # 应用匹配路径 满足/api-auth/** 的请求将会匹配并被路由
#          filters:
#          - StripPrefix=1   #去掉第一个前缀api-auth  从二级url路径转发 http://localhost:aa/bbb  将会转发到http://服务名/test 和resTemplte类似
#          - name: Hystrix  #熔断机制
#            args:
#              name : fallbackcmd
#              fallbackUri: forward:/defaultfallback  # 可以为不同的服务走不同的熔断回调
#  redis:
#    host: 127.0.0.1
#    # 端口
#    port: 6379
#hystrix:
#  command:
#      fallbackcmd:
#          execution:
#            isolation:
#              thread:
#                timeoutInMilliseconds: 1*5000  #超时时间，若不设置超时时间则有可能无法触发熔断